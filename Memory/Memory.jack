// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;     // the RAM array (changed from memory)
    static Array freeList; // the heap array (changed from heap)
    
    /** Initializes the class. */
    function void init() {
        let ram = 0;             // set the address of the memory array to start at 0
        let freeList = 2048;     // set the address of the heap array to start at 2048
        
        // set up the first and second block in the heap
        let freeList[0] = 0;     // fist node has no free space, and is just the sentinel node
        let freeList[1] = 2;     // point to the next node in the linked list
        let freeList[2] = 14333; // free space in this block. (heap has 16384-2048=14335. first block takes 2, and size slot on second block takes 1, so 14336-2-1=14333
        let freeList[3] = 0;     // address of next block (null)
    
        return;
    }
    
    /** Returns the RAM value at the given address. */
    function int peek(int memoryLocation) {
        return ram[memoryLocation];
    }
    
    /** Sets the RAM value at the given address to the given value. */
    function void poke(int memoryLocation, int data) {
        let ram[memoryLocation] = data;
        return;
    }
    
    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int blockSize) {
        var int previousNode, currentNode;
        // cannot allocate a block of size 0 or less
        if (blockSize < 1) {
            do Sys.error(1);
        }
        
        // previousNode points to sentinel node
        let previousNode = 0;
        let currentNode = freeList[previousNode+1];
        
        // search for the first available block that is large enough
        while (~(currentNode = 0)) {
            
            // current block is a perfect match
            if (freeList[currentNode] = blockSize) {
                // remove this node from the linked list, and return it as the block for use
                let freeList[previousNode+1] = freeList[currentNode + 1];
                return freeList + currentNode + 1;
            }
            // current block is larger than the requested size
            if (freeList[currentNode] > blockSize) {
        
                // split the current block into two blocks
                let freeList[currentNode + 1 + blockSize] = freeList[currentNode] - (blockSize + 1);    // set the size of the next block to be the current block size minus the requested memory
                let freeList[currentNode] = blockSize;                                        // mark the current block as the size requested
                
                // remove this node from the linked list
                let freeList[previousNode + 1] = currentNode + 1 + blockSize;                  // set the previous block to point to the newly split off block
                let freeList[currentNode + 1 + blockSize + 1] = freeList[currentNode + 1];         // set the newly split off block to point to what the current block was pointing to
                return freeList + currentNode + 1;
            }
            // current block is too small, so move on to the next block
            let previousNode = currentNode;
            let currentNode = freeList[currentNode+1];
        }
        // no block was found
        do Sys.error(1);
        return 0;
    }
    
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array memoryBlock) {
        let memoryBlock[0] = freeList[1];  // set this block to now point to the next block in the linked list
        let freeList[1] = (memoryBlock - 1) - freeList;    // set the sentinel node to point to this block
        return;
    }
}