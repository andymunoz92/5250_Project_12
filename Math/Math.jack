// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powersTable;
    /** Initializes the library. */
    function void init() {
        var int index; // Changed from i
        let powersTable = Array.new(16);
        let powersTable[0] = 1;
        let index = 1;
        while (index < 16) {
            let powersTable[index] = powersTable[index-1] + powersTable[index-1];
            let index = index + 1;
        }
        return;
    }
    function boolean bit(int value, int position) { 
        return (value & powersTable[position]) > 0;
    }
    function int sign(int value) {
        if (value < 0) {
            return -1;
        }
        return 1;
    }
    /** Returns the absolute value of x. */
    function int abs(int value) {
        if (value < 0) {
            return -value;
        }
        return value;
    }
    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int num1, int num2) {
        var int sum, bitIndex; // Changed from acc, i
        var boolean isPositive; // Changed from pos
        // keep track of sign of result (not allowed to use multiplication here)
        let isPositive = (((num1 > 0) | (num1 = 0)) & ((num2 > 0) | (num2 = 0))) | ((num1 < 0) & (num2 < 0));
        let num1 = Math.abs(num1);
        let num2 = Math.abs(num2);
        
        let sum = 0;
        let bitIndex = 0;
        while (bitIndex < 16) {
            if (Math.bit(num2, bitIndex)) {
                let sum = sum + num1;
            }
            let num1 = num1 + num1;
            let bitIndex = bitIndex + 1;
        }
        if (isPositive) {
            return sum;
        } else {
            return -sum;
        }
    }
    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int numerator, int denominator) { 
        var int quotient, doubledQuotient, signValue; 
        
        // error if try to divide by zero
        if (denominator = 0) {
            do Sys.error(1);
        }
        let signValue = Math.sign(numerator) * Math.sign(denominator);
        let numerator = Math.abs(numerator);
        let denominator = Math.abs(denominator);
        if ((denominator > numerator) | (denominator < 0)) {
            return 0;
        }
        let quotient = Math.divide(numerator, denominator + denominator);
        let doubledQuotient = quotient + quotient;
        if ((numerator - (doubledQuotient*denominator)) < denominator) {
            return doubledQuotient * signValue;
        } else {
            return (doubledQuotient + 1) * signValue;
        }
    }
    /** Returns the integer part of the square root of x. */
    function int sqrt(int value) { // Changed from x
        var int bitPos, result, testVal, squaredTest; 
        let bitPos = 8; // 2^(16/2). sqrt(2^16) = 2^8
        let result = 0;
        while ((bitPos > 0) | (bitPos = 0)) {
            let testVal = result + powersTable[bitPos];
            let squaredTest = testVal * testVal;
            if (((squaredTest < value) | (squaredTest = value)) & (squaredTest > 0)) {
                let result = testVal;
            }
            let bitPos = bitPos - 1;
        }
        return result;
    }
    /** Returns the greater number. */
    function int max(int val1, int val2) {
        if (val1 > val2) {
            return val1;
        }
        return val2;
    }
    /** Returns the smaller number. */
    function int min(int val1, int val2) { 
        if (val1 < val2) {
            return val1;
        }
        return val2;
    }
}