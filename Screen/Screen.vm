function Screen.init 1
push constant 16384
pop static 4
push constant 0
not
pop static 0
push constant 16
call Array.new 1
pop static 1
push constant 0
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push local 0
push constant 1
sub
push static 1
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 1
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 512
call Array.new 1
pop static 2
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push constant 512
lt
not
if-goto WHILE_END1
push local 0
push static 2
add
push local 0
push constant 16
call Math.divide 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 256
call Array.new 1
pop static 3
push constant 0
pop local 0
label WHILE_EXP2
push local 0
push constant 256
lt
not
if-goto WHILE_END2
push local 0
push static 3
add
push local 0
push constant 32
call Math.multiply 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8192
lt
not
if-goto WHILE_END0
push local 0
push static 4
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 4
push argument 1
push static 3
add
pop pointer 1
push that 0
push argument 0
push static 2
add
pop pointer 1
push that 0
add
pop local 0
push local 0
push static 4
add
pop pointer 1
push that 0
pop local 1
push argument 0
push constant 15
and
pop local 2
push local 2
push static 1
add
pop pointer 1
push that 0
pop local 3
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 3
or
pop local 1
goto IF_END0
label IF_FALSE0
push local 1
push local 3
not
and
pop local 1
label IF_END0
push local 0
push static 4
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.drawLine 6
push argument 0
push argument 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 3
push argument 1
sub
pop local 1
push local 1
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
pop local 1
goto IF_END1
label IF_FALSE1
push constant 1
neg
pop local 1
label IF_END1
label WHILE_EXP0
push argument 3
push argument 1
eq
not
not
if-goto WHILE_END0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 1
push local 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push argument 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 2
push argument 0
sub
pop local 0
push local 0
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
pop local 0
goto IF_END3
label IF_FALSE3
push constant 1
neg
pop local 0
label IF_END3
label WHILE_EXP1
push argument 2
push argument 0
eq
not
not
if-goto WHILE_END1
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 0
add
pop argument 0
goto WHILE_EXP1
label WHILE_END1
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE2
push argument 0
push argument 2
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 1
pop local 2
push argument 2
push argument 0
sub
pop local 0
goto IF_END4
label IF_FALSE4
push constant 1
neg
pop local 2
push argument 0
push argument 2
sub
pop local 0
label IF_END4
push argument 1
push argument 3
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 1
pop local 3
push argument 1
push argument 3
sub
pop local 1
goto IF_END5
label IF_FALSE5
push constant 1
neg
pop local 3
push argument 3
push argument 1
sub
pop local 1
label IF_END5
push local 0
push local 1
add
pop local 4
label WHILE_EXP2
push constant 0
not
not
if-goto WHILE_END2
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 0
push argument 2
eq
push argument 1
push argument 3
eq
and
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
return
label IF_FALSE6
push constant 2
push local 4
call Math.multiply 2
pop local 5
push local 5
push local 1
gt
push local 5
push local 1
eq
or
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push argument 0
push argument 2
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 0
return
label IF_FALSE8
push local 4
push local 1
add
pop local 4
push argument 0
push local 2
add
pop argument 0
label IF_FALSE7
push local 5
push local 0
lt
push local 5
push local 0
eq
or
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push argument 1
push argument 3
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 0
return
label IF_FALSE10
push local 4
push local 0
add
pop local 4
push argument 1
push local 3
add
pop argument 1
label IF_FALSE9
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 3
push argument 1
eq
not
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 2
push argument 1
call Screen.drawLine 4
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 4
push constant 0
pop local 0
push argument 2
pop local 1
push constant 3
push argument 2
push argument 2
add
sub
pop local 2
push argument 0
push argument 1
push local 1
sub
push argument 0
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
push argument 0
push local 1
sub
push argument 1
push argument 0
push local 1
add
push argument 1
call Screen.drawLine 4
pop temp 0
label WHILE_EXP0
push local 1
push local 0
gt
push local 1
push local 0
eq
or
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
push local 2
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 1
sub
pop local 1
push local 0
push local 1
sub
pop local 3
push local 2
push local 3
add
push local 3
add
push local 3
add
push local 3
add
push constant 10
add
pop local 2
goto IF_END0
label IF_FALSE0
push local 2
push local 0
add
push local 0
add
push local 0
add
push local 0
add
push constant 6
add
pop local 2
label IF_END0
push argument 0
push local 0
sub
push argument 1
push local 1
add
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
push argument 0
push local 0
sub
push argument 1
push local 1
sub
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawLine 4
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 0
add
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawLine 4
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 0
sub
push argument 0
push local 1
add
push argument 1
push local 0
sub
call Screen.drawLine 4
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.outlineCircle 4
push constant 0
pop local 0
push argument 2
pop local 1
push constant 3
push argument 2
push argument 2
add
sub
pop local 2
push argument 0
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push argument 0
push argument 1
push local 1
sub
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 1
add
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 1
sub
push argument 1
call Screen.drawPixel 2
pop temp 0
label WHILE_EXP0
push local 1
push local 0
gt
push local 1
push local 0
eq
or
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
push local 2
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 1
sub
pop local 1
push local 0
push local 1
sub
pop local 3
push local 2
push local 3
add
push local 3
add
push local 3
add
push local 3
add
push constant 10
add
pop local 2
goto IF_END0
label IF_FALSE0
push local 2
push local 0
add
push local 0
add
push local 0
add
push local 0
add
push constant 6
add
pop local 2
label IF_END0
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 0
sub
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 0
sub
push argument 1
push local 1
sub
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 0
add
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 1
add
push argument 1
push local 0
sub
call Screen.drawPixel 2
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 0
sub
call Screen.drawPixel 2
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
