// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int size;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int capacity) {
        if (capacity < 1) {
            let capacity = 1;
        }
        let buffer = Array.new(capacity);
        let size = 0;
        return this;
    }
    
    /** Disposes this string. */
    method void dispose() {
        do buffer.dispose();
        do Memory.deAlloc(this);
        return;
    }
    
    /** Returns the current length of this string. */
    method int length() {
        return size;
    }
    
    /** Returns the character at the j-th location of this string. */
    method char charAt(int index) {
        return buffer[index];
    }
    
    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int index, char character) {
        let buffer[index] = character;
        return;
    }
    
    /** Appends c to this string's end and returns this string. */
    method String appendChar(char character) {
        let buffer[size] = character;
        let size = size + 1;
        return this;
    }
    
    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let size = size - 1;
        return;
    }
    
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, position;
        var boolean isNegative;
        
        let result = 0;
        let position = 0;
        
        // check if string starts with a negative sign
        if (charAt(position) = 45) {
            let isNegative = true;
            let position = position + 1;
        }
        
        // convert the string to an int
        while (position < length()) {
            let result = result * 10;
            let result = result + charAt(position) - 48;
            let position = position + 1;
        }
        
        // handle if result is negative
        if (isNegative) {
            let result = result * -1;
        }
        
        return result;
    }
    
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int number) {
        var Array tempArray;
        var int currentPos, digitPos, digit;
        var boolean isNegative;
        
        let tempArray = Array.new(6);
        
        // handle if number is negative
        if (number < 0) {
            let isNegative = true;
            let number = number * -1;
        } else {
            let isNegative = false;
        }
        
        // save value into the string
        let digitPos = 0;
        while (number > 0) {
            let digit = number - ((number/10)*10); //number % 10;
            let number = number / 10;
            let tempArray[digitPos] = digit + 48;
            let digitPos = digitPos + 1;
        }
        
        // save the negative sign
        if (isNegative) {
            let tempArray[digitPos] = 45;
            let digitPos = digitPos + 1;
        }
        
        // save the chars into the string
        let currentPos = 0;
        while (digitPos > 0) {
            let digitPos = digitPos - 1;
            do setCharAt(currentPos, tempArray[digitPos]);
            let currentPos = currentPos + 1;
        }
        
        // set the length
        let size = currentPos;
        return;
    }
    
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }
    
    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }
    
    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}