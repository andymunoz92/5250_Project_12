// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static Array keyboardMem; 

    /** Initializes the keyboard. */
    function void init() {
        let keyboardMem = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return keyboardMem[0];
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char keyCode, currentKey, counter;
        var boolean blinkState;
        let keyCode = 0;
        let counter = 0;
        let blinkState = true;

        // make space for the cursor
        do Output.printChar(32);

        // wait till a (printable) key is pressed
        while (keyCode = 0) {
            let keyCode = Keyboard.keyPressed();

            // draw blinking cursor
            let counter = counter + 1;
            if (counter = 0) {
                do Output.backSpace();
                if (blinkState)  {
                    do Output.printChar(32); // space
                } else {
                    do Output.printChar(95); // underscore
                }
                let blinkState = ~blinkState;
            }
        }

        // wait till the key is released
        let currentKey = keyCode;
        while (currentKey = keyCode) {
            let currentKey = Keyboard.keyPressed();
        }

        // backspace to remove the cursor, 
        do Output.backSpace();

        // print the letter if printable
        if ((keyCode > 31) & (keyCode < 127)) {
            do Output.printChar(keyCode);
        }
        // else handle newline
        if (keyCode = 128) {
            do Output.println();
        }
        // else handle backspace
        if (keyCode = 129) {
            do Output.backSpace();
        }
        
        return keyCode;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String prompt) {
        var char keyCode;
        var String inputText;

        // print the message
        do Output.printString(prompt);

        let inputText = String.new(256); // max input length is 256

        // read the line
        let keyCode = Keyboard.readChar();
        while (~(keyCode = 128)) {  // while not newline
            // save the letter if printable
            if ((keyCode > 31) & (keyCode < 127)) {
                do inputText.appendChar(keyCode);
            }

            // else handle backspace
            if (keyCode = 129) {
                do inputText.eraseLastChar();
            }
           
            // read the next character
            let keyCode = Keyboard.readChar();
        }

        return inputText;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String prompt) {
        var char keyCode;
        var int result;
        var boolean isNegative;

        // print the message
        do Output.printString(prompt);

        // check if first character is a minus sign
        let keyCode = Keyboard.readChar();
        if (keyCode = 45) {
            let isNegative = true;
            let result = 0;
        } else {
            let isNegative = false;
            let result = (keyCode - 48);
        }

        // read the rest of the number
        while (~(keyCode = 128)) {
            let keyCode = Keyboard.readChar();
            if ((keyCode > 47) & (keyCode < 58)) {
                let result = (result * 10) + (keyCode - 48);
            }
        }

        // apply the minus sign if needed
        if (isNegative) {
            let result = -result;
        }

        return result;
    }
}